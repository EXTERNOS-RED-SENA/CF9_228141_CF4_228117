{"remainingRequest":"/home/runner/work/CF9_228141_CF4_228117/CF9_228141_CF4_228117/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CF9_228141_CF4_228117/CF9_228141_CF4_228117/src/pages/Tema6.vue?vue&type=template&id=b4004a7c&lang=pug","dependencies":[{"path":"/home/runner/work/CF9_228141_CF4_228117/CF9_228141_CF4_228117/src/pages/Tema6.vue","mtime":1734984639865},{"path":"/home/runner/work/CF9_228141_CF4_228117/CF9_228141_CF4_228117/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF9_228141_CF4_228117/CF9_228141_CF4_228117/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF9_228141_CF4_228117/CF9_228141_CF4_228117/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/CF9_228141_CF4_228117/CF9_228141_CF4_228117/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/CF9_228141_CF4_228117/CF9_228141_CF4_228117/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/CF9_228141_CF4_228117/CF9_228141_CF4_228117/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF9_228141_CF4_228117/CF9_228141_CF4_228117/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}