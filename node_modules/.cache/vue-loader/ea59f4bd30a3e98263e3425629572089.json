{"remainingRequest":"/home/runner/work/CF9_228141_CF4_228117/CF9_228141_CF4_228117/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CF9_228141_CF4_228117/CF9_228141_CF4_228117/src/pages/Tema1.vue?vue&type=template&id=320bc379&lang=pug","dependencies":[{"path":"/home/runner/work/CF9_228141_CF4_228117/CF9_228141_CF4_228117/src/pages/Tema1.vue","mtime":1734984639864},{"path":"/home/runner/work/CF9_228141_CF4_228117/CF9_228141_CF4_228117/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF9_228141_CF4_228117/CF9_228141_CF4_228117/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF9_228141_CF4_228117/CF9_228141_CF4_228117/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/CF9_228141_CF4_228117/CF9_228141_CF4_228117/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/CF9_228141_CF4_228117/CF9_228141_CF4_228117/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/CF9_228141_CF4_228117/CF9_228141_CF4_228117/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF9_228141_CF4_228117/CF9_228141_CF4_228117/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}