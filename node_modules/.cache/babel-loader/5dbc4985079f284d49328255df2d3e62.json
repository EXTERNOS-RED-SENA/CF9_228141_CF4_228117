{"remainingRequest":"/home/runner/work/CF9_228141_CF4_228117/CF9_228141_CF4_228117/node_modules/thread-loader/dist/cjs.js!/home/runner/work/CF9_228141_CF4_228117/CF9_228141_CF4_228117/node_modules/babel-loader/lib/index.js!/home/runner/work/CF9_228141_CF4_228117/CF9_228141_CF4_228117/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/runner/work/CF9_228141_CF4_228117/CF9_228141_CF4_228117/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CF9_228141_CF4_228117/CF9_228141_CF4_228117/src/pages/Tema2.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/runner/work/CF9_228141_CF4_228117/CF9_228141_CF4_228117/src/pages/Tema2.vue","mtime":1734984639864},{"path":"/home/runner/work/CF9_228141_CF4_228117/CF9_228141_CF4_228117/babel.config.js","mtime":1734984639773},{"path":"/home/runner/work/CF9_228141_CF4_228117/CF9_228141_CF4_228117/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF9_228141_CF4_228117/CF9_228141_CF4_228117/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF9_228141_CF4_228117/CF9_228141_CF4_228117/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/CF9_228141_CF4_228117/CF9_228141_CF4_228117/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF9_228141_CF4_228117/CF9_228141_CF4_228117/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdUZW1hMicsCiAgZGF0YTogKCkgPT4gKHsKICAgIC8vIHZhcmlhYmxlcyBkZSB2dWUKICB9KSwKICBtb3VudGVkKCkgewogICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gewogICAgICB0aGlzLiRhb3NSZWZyZXNoKCk7CiAgICB9KTsKICB9LAogIHVwZGF0ZWQoKSB7CiAgICB0aGlzLiRhb3NSZWZyZXNoKCk7CiAgfQp9Ow=="},{"version":3,"names":["name","data","mounted","$nextTick","$aosRefresh","updated"],"sources":["src/pages/Tema2.vue"],"sourcesContent":["<template lang=\"pug\">\n  .curso-main-container.pb-3\n    BannerInterno\n    .container.tarjeta.tarjeta--blanca.p-4.p-md-5.mb-5\n      .titulo-principal.color-acento-contenido\n        .titulo-principal__numero\n          span 2\n        h1 Fundamentos de programación\n      .row.bg3.align-items-center.mb-5\n        .col-lg-12.col-12.px-lg-5.px-4\n          .row.justify-content-center.align-items-center          \n            .col-lg-12\n              .row.justify-content-center.align-items-center.bg1.p-4.brad\n                .col-lg-auto\n                  img.img-a.img-t(src='@/assets/curso/temas/11.svg' alt='')\n                .col.pt-lg-0.pt-md-4\n                  p.mb-0 La programación es el lenguaje que permite la comunicación con los datos. Este capítulo establece las bases fundamentales de la programación, presentando conceptos esenciales como algoritmos, variables y estructuras de control, que son punto de partida para comprender cómo se manipulan y procesan los grandes volúmenes de datos en el contexto del #[em Big Data.]\n              Separador \n              #t_2_1.titulo-segundo.color-acento-contenido\n                h2 2.1\tConcepto de algoritmo\n              .row.justify-content-center.mb-4\n                .col-lg-8.my-lg-0.my-3\n                  p Un algoritmo es una secuencia de pasos lógicos y bien definidos que resuelven un problema específico. En programación, los algoritmos permiten desarrollar soluciones eficientes y estructuradas. Algunas características clave, que pueden ayudar a comprender lo que es un algoritmo, son las siguientes:\n  \n                  ul.lista-ul.fa-ul\n                    li\n                      i.fas.fa-check.v1\n                      span #[b Precisión:] cada paso debe estar claramente definido.\n                    hr\n  \n                    li\n                      i.fas.fa-check.v1\n                      span #[b Finitud:] debe terminar después de un número finito de pasos.\n                    hr\n  \n                    li\n                      i.fas.fa-check.v1\n                      span #[b Entrada:] puede tener cero o más entradas.\n                    hr\n  \n                    li\n                      i.fas.fa-check.v1\n                      span #[b Salida:] debe producir al menos un resultado.\n                    hr\n  \n                    li\n                      i.fas.fa-check.v1\n                      span #[b Eficacia:] debe ser lo suficientemente básico como para ser llevado a cabo por una persona usando lápiz y papel.\n                    hr\n  \n                .col-lg-4.my-lg-0.my-3\n                  img.img-a.img-t(src='@/assets/curso/temas/12.png' alt='') \n  \n      Separador \n      #t_2_2.titulo-segundo.color-acento-contenido\n        h2 2.2\tVariables y tipos de datos\n      .row.justify-content-center.mb-4\n        .col-lg-4.my-lg-0.my-3\n          img.img-a.img-t(src='@/assets/curso/temas/13.png' alt='')          \n        .col-lg-8.my-lg-0.my-3\n          .row.justify-content-center.align-items-center.bg4.br-d.p-4.brad.mb-4\n            .col-lg-auto\n              img.img-a.img-t(src='@/assets/curso/temas/14.png' alt='')\n            .col.pt-lg-0.pt-md-4\n              p.mb-0 Las variables son contenedores para almacenar datos en la memoria del computador. Cada variable tiene un tipo de dato asociado que determina qué clase de información puede almacenar. Los siguientes son los tipos de datos más comunes:\n          .bg6.p-4.brad\n            ul.mb-0.lista-ul.fa-ul\n              li\n                i.fas.fa-check.v1\n                span #[b Enteros (int):] números sin parte decimal (ej. 1, -5, 100).\n              li\n                i.fas.fa-check.v1\n                span #[b Flotantes (float):] números con parte decimal (ej. 3.14, -0.01, 2.0).\n              li\n                i.fas.fa-check.v1\n                span #[b Cadenas (string):] secuencias de caracteres (ej. \"Hola mundo\", \"OpenAI\").\n              li\n                i.fas.fa-check.v1\n                span #[b Booleanos (bool):] valores de verdadero (True) o falso (False).\n              li\n                i.fas.fa-check.v1\n                span #[b Listas:] colecciones ordenadas de elementos (ej. [1, 2, 3, 4]).\n              li.mb-0\n                i.fas.fa-check.v1\n                span.mb-0 #[b Diccionarios:] colecciones de pares clave-valor (ej. {\"nombre\": \"Juan\", \"edad\": 30}).\n  \n      Separador \n      #t_2_3.titulo-segundo.color-acento-contenido\n        h2 2.3\tOperadores\n        \n      .row.justify-content-center.align-items-center.mb-5\n        .col-lg-auto\n          img.img-a.img-t(src='@/assets/curso/temas/15.png' alt='')\n        .col.pt-lg-0.pt-md-4\n          p.mb-0 Los operadores son símbolos especiales que realizan acciones específicas sobre uno o más operandos. La Tabla 2 muestra los diferentes tipos que se utilizan comúnmente en la mayoría de los lenguajes de programación. Estos incluyen operadores aritméticos para realizar cálculos matemáticos, operadores de comparación para comparar valores, operadores lógicos para combinar condiciones, operadores de asignación para asignar valores a variables y operadores #[em bit] a #[em bit] para manipular datos a nivel de #[em bits]. \n  \n      .row.justify-content-center\n        .col-lg-10\n          .titulo-sexto.color-acento-botones\n            h5 Tabla 2.\n            span Tipos de operadores en programación\n  \n          .tabla-a.color-acento-botones.text-center.mb-2 \n            table\n              caption Fuente: OIT, 2024.\n              thead\n                tr\n                  th Tipo de Operador\n                  th Ejemplos\n                  th Descripción\n              tbody\n                tr\n                  td Aritméticos\n                  td +, -, *, /, %\n                  td Realizan operaciones matemáticas básicas\n                tr\n                  td Comparación\n                  td ==, !=, >, <, >=, <=\n                  td Comparan valores y devuelven un booleano\n                tr\n                  td Lógicos\n                  td and, or, not\n                  td Combinan condiciones booleanas\n                tr\n                  td Asignación\n                  td =, +=, -=, *=, /=\n                  td Asignan valores a variables\n                tr\n                  td #[em Bit] a #[em bit]\n                  td &, \\\n                  td , ^, ~, <<, >>\n  \n      Separador \n      #t_2_4.titulo-segundo.color-acento-contenido\n        h2 2.4\tEstructuras de control de flujo                \n  \n      p Las estructuras de control de flujo determinan el orden en que se ejecutan las instrucciones en un programa. Son esenciales en programación, ya que permiten dirigir la ejecución del código según condiciones específicas y repetir acciones cuando sea necesario. Las principales son:\n  \n      .row.justify-content-center\n        .col-lg-4.my-3\n          img.img-a.img-t(src='@/assets/curso/temas/19.png', alt='')\n        .col-lg-8.my-3\n          CarouselCard.mb-2(columnas=\"col-lg-6\")\n            .bg7.brad1.p-4.h-100\n              img.img-t.img-a.mb-4(src='@/assets/curso/temas/16.png' alt='')\n              .row.justify-content-center.mb-3\n                .col-auto.bg1.px-3.py-1                        \n                  h5.mb-0.text-center Estructuras secuenciales\n              p.mb-0 Son aquellas en las que las instrucciones se ejecutan una tras otra en el orden en que están escritas. Este es el flujo más básico en un programa, donde no hay saltos ni bifurcaciones. \n  \n            .bg7.brad1.p-4.h-100\n              img.img-t.img-a.mb-4(src='@/assets/curso/temas/17.png' alt='')\n              .row.justify-content-center.mb-3\n                .col-auto.bg1.px-3.py-1                        \n                  h5.mb-0.text-center Estructuras condicionales\n              p.mb-0 Permiten ejecutar diferentes bloques de código según se cumplan o no ciertas condiciones. Introducen decisiones en el flujo del programa, habilitando rutas alternativas de ejecución.\n  \n            .bg7.brad1.p-4.h-100\n              img.img-t.img-a.mb-4(src='@/assets/curso/temas/18.png' alt='')\n              .row.justify-content-center.mb-3\n                .col-auto.bg1.px-3.py-1                        \n                  h5.mb-0.text-center Estructuras repetitivas\n              p.mb-0 Permiten ejecutar un bloque de código múltiples veces, lo cual es útil para manejar tareas que requieren iteración, como procesar elementos de una lista o realizar operaciones hasta que se cumpla una condición.\n  \n      .row.justify-content-center\n        .col-lg-10\n          .titulo-sexto.color-acento-botones\n            h5 Tabla 3.\n            span Tipos de estructuras de datos y ejemplos\n  \n          .tabla-a.color-acento-botones.mb-2 \n            table\n              caption Fuente: OIT, 2024.\n              thead\n                tr\n                  th Tipo de estructura de control de flujo\n                  th Ejemplo en lenguaje Python\n                  th Observación\n              tbody\n                tr\n                  td \n                    span #[b Estructuras secuenciales.]<br>\n                    span Ejecución lineal de instrucciones.\n  \n                  td \n                    span print(\"Inicio del programa\")\n                    br\n                    span nombre = input(\"Ingresa tu nombre: \")\n                    br\n                    span print(f\"Hola, {nombre}!\")\n                    br\n                    span print(\"Fin del programa\")\n  \n                  td En este ejemplo, cada instrucción se ejecuta secuencialmente, desde el inicio hasta el final, siguiendo el orden establecido.\n                tr\n                  td \n                    span #[b Estructuras condicionales.]<br>\n                    span Decisiones basadas en condiciones que alteran el flujo del programa.\n  \n                  td \n                    span edad = int(input(\"Ingresa tu edad: \"))\n                    br\n                    span if edad >= 18:\n                        br\n                        span.ps-3 print(\"Eres mayor de edad\")\n                    span else:\n                        span.ps-3 print(\"Eres menor de edad\")\n  \n                  td En este caso, el programa solicita al usuario su edad y luego verifica si es mayor o igual a 18. Si la condición es verdadera (edad >= 18), se ejecuta el bloque dentro del if; de lo contrario, se ejecuta el bloque dentro del else.\n                tr\n                  td \n                    span #[b Estructuras repetitivas.]<br>\n                    span Repetición de bloques de código para realizar tareas iterativas.\n  \n                  td \n                    span for i in range(5):\n                        br\n                        span.ps-3 print(f\"Iteración {i}\")\n  \n                  td \n                    span En este bucle, el bloque de código dentro del for se ejecuta cinco veces. La función range(5) genera una secuencia de números del 0 al 4, y en cada iteración, la variable i toma uno de estos valores. El programa imprimirá:\n                    br\n                    | Iteración 0\n                    br\n                    | Iteración 1\n                    br\n                    | Iteración 2\n                    br\n                    | Iteración 3\n                    br\n                    | Iteración 4\n                    br\n                    | Este tipo de estructura es fundamental para recorrer colecciones de datos y automatizar procesos repetitivos.\n  \n  \n      Separador \n      #t_2_5.titulo-segundo.color-acento-contenido\n        h2 2.5\tArreglos\n        \n      .row.justify-content-center.align-items-center.mb-5\n        .col-lg-auto\n          img.img-a.img-t(src='@/assets/curso/temas/21.png' alt='')\n        .col.pt-lg-0.pt-md-4\n          p.mb-0 Los arreglos son estructuras de datos que almacenan elementos del mismo tipo en posiciones de memoria contiguas. En muchos lenguajes modernos, como Python, se utilizan listas que son más flexibles que los arreglos tradicionales. El siguiente es un ejemplo en ese lenguaje de programación. \n        .col-lg-auto\n          .p-4.tarjeta.color-secundario--borde\n            pre\n              code \n                |numeros = [1, 2, 3, 4, 5]\n                |print(numeros[2])  # Imprime: 3\n                |\n                \n\n  \n      Separador \n      #t_2_6.titulo-segundo.color-acento-contenido\n        h2 2.6\tFicheros\n        \n      .row.justify-content-center.align-items-center.mb-5\n        .col-lg-4.my-lg-0.my-3\n          img.img-a.img-t(src='@/assets/curso/temas/22.png' alt='')\n        .col-lg-5.my-lg-0.my-3\n          .bg8.p-3.h-100\n            p Los ficheros permiten almacenar datos de forma permanente en el disco duro. Las operaciones básicas con ficheros incluyen:\n            ul.lista-ul.fa-ul\n              li\n                i.fas.fa-check.v1\n                span Abrir un fichero.\n              li\n                i.fas.fa-check.v1\n                span Leer datos de un fichero.\n              li\n                i.fas.fa-check.v1\n                span Escribir datos en un fichero.\n              li\n                i.fas.fa-check.v1\n                span Cerrar un fichero.\n  \n            p Este es un ejemplo de escritura en un fichero en Python:\n            .p-4.tarjeta.color-secundario--borde\n              pre\n                code\n                  |with open('ejemplo.txt', 'w') as f:\n                  |    f.write('Hola, mundo!')      \n  \n        .col-lg-3.my-lg-0.my-3\n          img.img-a.img-t(src='@/assets/curso/temas/23.png' alt='')     \n  \n      Separador \n      #t_2_7.titulo-segundo.color-acento-contenido\n        h2 2.7\tFunciones\n        \n      .row.justify-content-center.align-items-center.mb-5\n        .col-lg-8.my-lg-0.my-3\n          p Las funciones son bloques de código reutilizables que realizan una tarea específica. Ayudan a organizar el código, evitar la repetición y mejorar la legibilidad. Ejemplo de función en Python: \n          .row.justify-content-start.align-items-center.mb-4\n            .col-lg-auto.my-lg-0.my-3\n              img.img-a.img-t(src='@/assets/curso/temas/25.png' alt='')\n            .col-lg-5.my-lg-0.my-3\n              .p-4.tarjeta.color-secundario--borde\n                pre\n                  code \n                    |def saludar(nombre):\n                    |    return f\"Hola, {nombre}!\"\n                    |print(saludar(\"Ana\"))  # Imprime: Hola, Ana!\n\n              \n          .bg9.brad.p-3\n            p.mb-0 Estos fundamentos de programación son esenciales para comprender cómo se desarrollan las soluciones de #[i software] en el contexto del #[i Big Data]. En los próximos capítulos, se percibirá cómo estos conceptos se aplican en lenguajes específicos utilizados en la analítica de datos.      \n  \n        .col-lg-4.my-lg-0.my-3\n          img.img-a.img-t(src='@/assets/curso/temas/27.png' alt='')              \n  </template>\n\n<script>\nexport default {\n  name: 'Tema2',\n  data: () => ({\n    // variables de vue\n  }),\n  mounted() {\n    this.$nextTick(() => {\n      this.$aosRefresh()\n    })\n  },\n  updated() {\n    this.$aosRefresh()\n  },\n}\n</script>\n\n<style lang=\"sass\"></style>\n"],"mappings":"AA2TA;EACAA,IAAA;EACAC,IAAA,EAAAA,CAAA;IACA;EAAA,CACA;EACAC,QAAA;IACA,KAAAC,SAAA;MACA,KAAAC,WAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAD,WAAA;EACA;AACA","ignoreList":[]}]}